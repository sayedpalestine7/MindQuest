# ### Base Test
# GET http://localhost:5000

# ###
# POST http://localhost:5000/api/auth/register
# Content-Type: application/json

# {
#   "name": "Sayed Qutob",
#   "email": "sayed123@example.com",
#   "password": "123456",
#   "role": "teacher",
#   "teacherData": {
#     "specialization": "Computer Engineering",
#     "institution": "An-Najah National University",
#     "certification": "https://example.com/cert.pdf"
#   }
# }

# ###
# POST http://localhost:5000/api/auth/register
# Content-Type: application/json

# {
#   "name": "Ahmad Dardouk",
#   "email": "ahmad@example.com",
#   "password": "123456",
#   "role": "student"
# }

# ###
# # @name login
# POST http://localhost:5000/api/auth/login
# Content-Type: application/json

# {
#   "email": "sayed123@example.com",
#   "password": "123456"
# }

# ###
# @token = {{login.response.body.token}}
# @userId = {{login.response.body.user._id}}
# ###
# # @name createCourse
# POST http://localhost:5000/api/courses
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "title": "Data Structures 101",
#   "description": "Learn stacks, queues, and linked lists interactively.",
#   "thumbnail": "https://example.com/image.jpg",
#   "teacherId": "{{userId}}",
#   "difficulty": "easy",
#   "scoreOnFinish": 50
# }

# ###
# @courseId = {{createCourse.response.body.course._id}}
# ###
# GET http://localhost:5000/api/courses

# ###
# GET http://localhost:5000/api/courses/{{courseId}}

# ###
# PUT http://localhost:5000/api/courses/{{courseId}}
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "title": "Data Structures 102",
#   "description": "Advanced trees and graph structures.",
#   "difficulty": "medium",
#   "thumbnail": "https://example.com/newimage.jpg"
# }

# ###
# DELETE http://localhost:5000/api/courses/{{courseId}}
# Authorization: Bearer {{token}}

# ###
# # @name createLesson
# POST http://localhost:5000/api/lessons
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "title": "Introduction to Stacks 2",
#   "courseId": "{{courseId}}"
# }

# ###
# @lessonId = {{createLesson.response.body.lesson._id}}
# ###
# GET http://localhost:5000/api/lessons/course/{{courseId}}

# ###
# GET http://localhost:5000/api/lessons/{{lessonId}}

# ###
# PUT http://localhost:5000/api/lessons/{{lessonId}}
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "title": "Stacks and Applications"
# }

# ###
# DELETE http://localhost:5000/api/lessons/{{lessonId}}
# Authorization: Bearer {{token}}

# ###
# POST http://localhost:5000/api/fields
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "lessonId": "{{lessonId}}",
#   "type": "paragraph",
#   "content": "Stacks are linear data structures that follow the LIFO principle.",
#   "order": 1
# }

# ###
# POST http://localhost:5000/api/fields
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "lessonId": "{{lessonId}}",
#   "type": "image",
#   "content": {
#     "url": "https://example.com/stack-illustration.png"
#   },
#   "order": 2
# }

# ###
# GET http://localhost:5000/api/fields/lesson/{{lessonId}}

# ###
# # @name createQuestion
# POST http://localhost:5000/api/questions
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "text": "What does LIFO stand for?",
#   "type": "mcq",
#   "options": ["Last In First Out", "First In First Out"],
#   "correctAnswer": "Last In First Out",
#   "points": 2,
#   "explanation": "LIFO means the last element inserted is the first one removed."
# }

# ###
# @questionId = {{createQuestion.response.body.question._id}}
# ###
# GET http://localhost:5000/api/questions

# ###
# POST http://localhost:5000/api/quizzes
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "title": "Data Structures Quiz 1",
#   "courseId": "{{courseId}}",
#   "questionIds": [
#     "{{questionId}}"
#   ]
# }

# ###
# GET http://localhost:5000/api/quizzes/course/{{courseId}}

# ###
# POST http://localhost:5000/api/progress
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "studentId": "{{userId}}",
#   "courseId": "{{courseId}}",
#   "completedLessons": ["{{lessonId}}"],
#   "quizScore": 8,
#   "totalScore": 10,
#   "status": "completed"
# }

# ###
# GET http://localhost:5000/api/progress/student/{{userId}}
# Authorization: Bearer {{token}}

# ###
# POST http://localhost:5000/api/progress/quizCompleted
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "studentId": "{{userId}}",
#   "courseId": "{{courseId}}",
#   "quizScore": 8,
#   "totalScore": 10
# }

# // Animation Routes Tests

# @baseUrl = http://localhost:5000/api/animations
# @token = {{login.response.body.token}}

# ### CREATE new animation
# # @name createAnimation
# POST {{baseUrl}}
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "name": "Bouncing Ball Animation",
#   "stages": [
#     {
#       "stageId": 1,
#       "duration": 1.5,
#       "components": [
#         {
#           "id": 1,
#           "type": "circle",
#           "style": {
#             "top": "100px",
#             "left": "50px",
#             "width": "50px",
#             "height": "50px",
#             "color": "red"
#           },
#           "content": ""
#         }
#       ]
#     }
#   ],
#   "nextComponentId": 2
# }

# ###
# @animationId = {{createAnimation.response.body._id}}

# ### GET all animations for teacher
# GET {{baseUrl}}
# Authorization: Bearer {{token}}

# ### GET animation by ID
# GET {{baseUrl}}/{{animationId}}
# Authorization: Bearer {{token}}

# ### UPDATE animation by ID (full replace)
# PUT {{baseUrl}}/{{animationId}}
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "name": "Updated Bouncing Ball Animation",
#   "stages": [
#     {
#       "stageId": 1,
#       "duration": 2.0,
#       "components": [
#         {
#           "id": 1,
#           "type": "circle",
#           "style": {
#             "top": "150px",
#             "left": "70px",
#             "width": "60px",
#             "height": "60px",
#             "color": "green"
#           },
#           "content": ""
#         }
#       ]
#     }
#   ],
#   "nextComponentId": 3
# }

# ### PATCH animation by ID (partial update)
# PATCH {{baseUrl}}/{{animationId}}
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "name": "Shortened Ball Animation"
# }

# ### DELETE animation by ID
# DELETE {{baseUrl}}/{{animationId}}
# Authorization: Bearer {{token}}

# ### DOWNLOAD animation as HTML
# POST {{baseUrl}}/download
# Content-Type: application/json
# Authorization: Bearer {{token}}

# {
#   "stages": [
#     {
#       "stageId": 1,
#       "duration": 1.5,
#       "components": [
#         {
#           "id": 1,
#           "type": "circle",
#           "style": {
#             "top": "100px",
#             "left": "50px",
#             "width": "50px",
#             "height": "50px",
#             "color": "red"
#           },
#           "content": ""
#         }
#       ]
#     }
#   ]
# }




### üß† Base Test
GET http://localhost:5000

### üë®‚Äçüè´ Register Teacher
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "name": "Sayed Qutob",
  "email": "sayed123@example.com",
  "password": "123456",
  "role": "teacher",
  "teacherData": {
    "specialization": "Computer Engineering",
    "institution": "An-Najah National University",
    "certification": "https://example.com/cert.pdf"
  }
}

### üë®‚Äçüéì Register Student
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "name": "Ahmad Dardouk",
  "email": "ahmad@example.com",
  "password": "123456",
  "role": "student"
}

### üîë Login (Teacher)
# @name login
POST http://localhost:5000/api/auth/login
Content-Type: application/json

{
  "email": "sayed123@example.com",
  "password": "123456"
}

### ü™™ Save token and userId from login response
@token = {{login.response.body.token}}
@userId = {{login.response.body.user._id}}

### üìò Create a new course
# @name createCourse
POST http://localhost:5000/api/courses
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Data Structures 102",
  "description": "Learn stacks, queues, and linked lists interactively.",
  "thumbnail": "https://picsum.photos/id/237/200/300",
  "teacherId": "{{userId}}",
  "rating": 4.5,
  "difficulty": "Beginner",
  "scoreOnFinish": 50
}

### Save courseId
@courseId = {{createCourse.response.body.course._id}}

### üìö Get all courses
GET http://localhost:5000/api/courses

### üìò Get course by ID
GET http://localhost:5000/api/courses/{{courseId}}

### ‚úèÔ∏è Update course
PUT http://localhost:5000/api/courses/{{courseId}}
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Data Structures 102",
  "description": "Advanced trees and graph structures.",
  "difficulty": "intermediate",
  "thumbnail": "https://example.com/newimage.jpg"
}

### üóëÔ∏è Delete course
DELETE http://localhost:5000/api/courses/{{courseId}}
Authorization: Bearer {{token}}

### üìñ Create lesson
# @name createLesson
POST http://localhost:5000/api/lessons
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Introduction to Stacks 3",
  "courseId": "{{courseId}}"
}

### Save lessonId
@lessonId = {{createLesson.response.body.lesson._id}}

### üìö Get all lessons for course
GET http://localhost:5000/api/lessons/course/{{courseId}}

### üìñ Get lesson by ID
GET http://localhost:5000/api/lessons/{{lessonId}}

### ‚úèÔ∏è Update lesson
PUT http://localhost:5000/api/lessons/{{lessonId}}
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Stacks and Applications"
}

### üóëÔ∏è Delete lesson
DELETE http://localhost:5000/api/lessons/{{lessonId}}
Authorization: Bearer {{token}}

### üß© Create field (paragraph)
POST http://localhost:5000/api/fields
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "lessonId": "{{lessonId}}",
  "type": "paragraph",
  "content": "Stacks are linear data structures that follow the LIFO principle.",
  "order": 1
}

### üß© Create field (image)
POST http://localhost:5000/api/fields
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "lessonId": "{{lessonId}}",
  "type": "image",
  "content": {
    "url": "https://example.com/stack-illustration.png"
  },
  "order": 2
}

### üß© Get fields for lesson
GET http://localhost:5000/api/fields/lesson/{{lessonId}}

### ‚ùì Create question
# @name createQuestion
POST http://localhost:5000/api/questions
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "text": "What does LIFO stand for?",
  "type": "mcq",
  "options": ["Last In First Out", "First In First Out"],
  "correctAnswer": "Last In First Out",
  "points": 2,
  "explanation": "LIFO means the last element inserted is the first one removed."
}

### Save questionId
@questionId = {{createQuestion.response.body.question._id}}

### ‚ùì Get all questions
GET http://localhost:5000/api/questions

### üß† Create quiz
POST http://localhost:5000/api/quizzes
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Data Structures Quiz 1",
  "courseId": "{{courseId}}",
  "questionIds": ["{{questionId}}"]
}

### üß† Get quiz for course
GET http://localhost:5000/api/quizzes/course/{{courseId}}

### üìä Save student progress
POST http://localhost:5000/api/progress
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "studentId": "{{userId}}",
  "courseId": "{{courseId}}",
  "completedLessons": ["{{lessonId}}"],
  "quizScore": 8,
  "totalScore": 10,
  "status": "completed"
}

### üìä Get student progress
GET http://localhost:5000/api/progress/student/{{userId}}
Authorization: Bearer {{token}}

### üìä Quiz completed update
POST http://localhost:5000/api/progress/quizCompleted
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "studentId": "{{userId}}",
  "courseId": "{{courseId}}",
  "quizScore": 8,
  "totalScore": 10
}

### üé¨ Animation API Tests ////////////////////////////////////////////////////////
@baseUrl = http://localhost:5000/api/animations

### üé® Create animation
# @name createAnimation
POST {{baseUrl}}
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Bouncing Ball Animation",
  "stages": [
    {
      "stageId": 1,
      "duration": 1.5,
      "components": [
        {
          "id": 1,
          "type": "circle",
          "style": {
            "top": "100px",
            "left": "50px",
            "width": "50px",
            "height": "50px",
            "color": "red"
          },
          "content": ""
        }
      ]
    }
  ],
  "nextComponentId": 2
}

### Save animationId
@animationId = {{createAnimation.response.body._id}}

### üé¨ Get all animations
GET {{baseUrl}}
Authorization: Bearer {{token}}

### üé¨ Get animation by ID
GET {{baseUrl}}/{{animationId}}
Authorization: Bearer {{token}}

### ‚úèÔ∏è Update animation
PUT {{baseUrl}}/{{animationId}}
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Updated Bouncing Ball Animation",
  "stages": [
    {
      "stageId": 1,
      "duration": 2.0,
      "components": [
        {
          "id": 1,
          "type": "circle",
          "style": {
            "top": "150px",
            "left": "70px",
            "width": "60px",
            "height": "60px",
            "color": "green"
          },
          "content": ""
        }
      ]
    }
  ],
  "nextComponentId": 3
}

### üîß Partial update (PATCH)
PATCH {{baseUrl}}/{{animationId}}
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "Shortened Ball Animation"
}

### üóëÔ∏è Delete animation
DELETE {{baseUrl}}/{{animationId}}
Authorization: Bearer {{token}}

### üíæ Download animation as HTML
POST {{baseUrl}}/download
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "stages": [
    {
      "stageId": 1,
      "duration": 1.5,
      "components": [
        {
          "id": 1,
          "type": "circle",
          "style": {
            "top": "100px",
            "left": "50px",
            "width": "50px",
            "height": "50px",
            "color": "red"
          },
          "content": ""
        }
      ]
    }
  ]
}
